using Iskra.StdWebGenerator.Extensions;

namespace Iskra.StdWebGenerator;

public class JSObjectCustomMethodsGenerator
{
    public static string Execute(GeneratorContext context)
    {
        var membersList = new List<string>();

        GenerateCustomMethods(context, membersList);

        var members = string.Join("\n\n", membersList);

        return $$"""
                 // <auto-generated/>

                 using System.Runtime.InteropServices.JavaScript;

                 namespace Iskra.StdWeb;

                 public static partial class JSObjectCustomMethodsExtensions
                 {
                 {{members.IndentLines(4)}}
                 }
                 """;
    }

    private static void GenerateCustomMethods(GeneratorContext context, List<string> outputMembers)
    {
        outputMembers.AddRange(context.ObjectMethods.Methods.Select(GenerateCustomMethod));
    }

    private static string GenerateCustomMethod(JSObjectMethodCallInfo method)
    {
        var returnTypeName = method.ReturnParam is null ? "void" : TypeNameGenerator.Execute(method.ReturnParam);

        var parameters = method.Parameters.Select((x, i) => $"{TypeNameGenerator.Execute(x)} arg{i}");
        var parametersForCall = method.Parameters.Select((x, i) => $"arg{i}");
        var parametersList = string.Join(", ", ["JSObject obj", "string methodName", ..parameters]);

        var jsImportParameters = method.Parameters.Select((x, i) => $"{TypeNameGenerator.Execute(x)} arg{i}");
        var jsImportParametersList = string.Join(", ", ["JSObject func", "JSObject obj", ..jsImportParameters]);
        var jsImportCallParametersList = string.Join(", ", ["method", "obj", ..parametersForCall]);


        return
            $$"""
              [JSImport("Function.prototype.call.call")]
              private static partial {{returnTypeName}} _{{method.Name}}({{jsImportParametersList}});

              public static {{returnTypeName}} {{method.Name}}({{parametersList}})
              {
              
                  var method = obj.GetPropertyAsJSObject(methodName)
                               ?? throw new Exception("Should be handled before.");
                               
                  return _{{method.Name}}({{jsImportCallParametersList}});
              } 
              """;
    }
}