using System.Reflection;
using System.Runtime.InteropServices.JavaScript;
using Iskra.StdWebGenerator.Extensions;

namespace Iskra.StdWebGenerator;

public static class DelegateGenerator
{
    public static string Execute(Type type)
    {
        var invokeMethod = type.GetMethod("Invoke");
        if (invokeMethod is null)
        {
            throw new Exception($"The type {type.FullName} is not a delegate");
        }


        var returnType = MyType.From(invokeMethod.ReturnParameter);
        var returnTypeName = TypeNameGenerator.Execute(returnType);
        var parameters = MethodParametersGenerator.Execute(invokeMethod);

        return $$"""
                 // <auto-generated/>

                 using System.Runtime.InteropServices.JavaScript;
                 using Iskra.StdWeb.Utils;

                 namespace Iskra.StdWeb;

                 #nullable enable

                 public delegate {{returnTypeName}} {{type.Name}}({{parameters}});

                 internal static partial class {{type.Name}}Extensions
                 {
                    public static JSObject ToJSObject(this {{type.Name}} del)
                    {
                        return JSObjectsCache.GetOrAdd(del, () =>
                        {
                            System.Console.WriteLine("JSObjectsCache.GetOrAdd creating new JSObject");

                 {{GetToJSObjectBody(type, invokeMethod).IndentLines(12)}}
                        });
                    }

                 {{GetToJSObjectProxy(invokeMethod).IndentLines(4)}}
                 }
                 """;
    }

    private static string GetToJSObjectBody(Type type, MethodInfo method)
    {
        var parameters = method.GetParameters();
        var needWrapperDelegate = parameters.Any(x => x.ParameterType.IsJSObjectWrapper()) ||
                                  method.ReturnType.IsJSObjectWrapper();

        return $$"""
                 FunctionProxy.EnsureInitialized();
                 {{(needWrapperDelegate ? $"\n{GetDelegateToMarshal(method)}\n" : "")}}
                 return ToJSObjectProxy({{(needWrapperDelegate ? "delToMarshal" : "del")}});
                 """;
    }

    private static string GetToJSObjectProxy(MethodInfo method)
    {
        return $"""
                [JSImport(FunctionProxy.ImportFunctionName)]
                private static partial JSObject ToJSObjectProxy({GetDelegateMarshalAsAttribute(method)} {GetDelegateDefToMarshal(method)} del);
                """;
    }

    private static string GetDelegateMarshalAsAttribute(MethodInfo method)
    {
        var marshalAttrs = method.GetParameters().Select(x => x.ParameterType.ToMarshalAsJSType()).ToList();

        if (!method.IsVoid())
        {
            marshalAttrs.Insert(0, method.ReturnType.ToMarshalAsJSType());
        }

        return $"[JSMarshalAs<JSType.Function<{string.Join(", ", marshalAttrs.Select(x => $"JSType.{x.Name}"))}>>]";
    }

    private static string GetDelegateDefToMarshal(MethodInfo method)
    {
        var parameters = method.GetParameters();
        List<string> parameterDefs = new(parameters.Length + (method.IsVoid() ? 0 : 1));
        foreach (var parameter in parameters)
        {
            var proxyParamType =
                parameter.ParameterType.IsJSObjectWrapper() ? typeof(JSObject) : parameter.ParameterType;

            var paramTypeName = TypeNameGenerator.Execute(
                proxyParamType,
                new NullabilityInfoContext().Create(method.ReturnParameter),
                true
            );

            parameterDefs.Add(paramTypeName);
        }

        if (!method.IsVoid())
        {
            var proxyReturnType = method.ReturnType.IsJSObjectWrapper() ? typeof(JSObject) : method.ReturnType;

            var paramTypeName = TypeNameGenerator.Execute(
                proxyReturnType,
                new NullabilityInfoContext().Create(method.ReturnParameter),
                true
            );

            parameterDefs.Add($"{paramTypeName}");

            return $"Func<{string.Join(", ", parameterDefs)}>";
        }

        return $"Action<{string.Join(", ", parameterDefs)}>";
    }

    private static string GetDelegateToMarshal(MethodInfo method)
    {
        var parameters = method.GetParameters();
        var paramNames = parameters.Select((_, i) => $"p{i}").ToArray();

        var finalParamNames = parameters
            .Select((x, i) => x.ParameterType.IsJSObjectWrapper() ? $"p{i}Marshaled" : $"p{i}").ToArray();

        return $$"""
                 {{GetDelegateDefToMarshal(method)}} delToMarshal = ({{string.Join(", ", paramNames)}}) =>
                 {
                 {{MarshalParams().IndentLines(4)}}
                    {{(method.IsVoid() ? "" : "var ret = ")}}del({{string.Join(", ", finalParamNames)}});{{(method.IsVoid() ? "" : $"\n{MarshalReturn().IndentLines(4)}")}}
                 };
                 """;

        string MarshalParams()
        {
            List<string> blocks = [];

            for (var i = 0; i < parameters.Length; i++)
            {
                if (parameters[i].ParameterType.IsJSObjectWrapper())
                {
                    blocks.Add($$"""
                                 var p{{i}}Marshaled = WrapperFactory.GetWrapper<{{TypeNameGenerator.Execute(parameters[i])}}>(p{{i}});
                                 """
                    );
                }
            }

            return string.Join("\n\n", blocks);
        }

        string MarshalReturn()
        {
            if (method.ReturnType.IsJSObjectWrapper())
            {
                return $$"""
                         var retMarshaled = WrapperFactory.GetWrapper<{{TypeNameGenerator.Execute(method.ReturnParameter)}}>(ret);
                         return retMarshaled;
                         """;
            }

            return "return ret;";
        }
    }
}