// <auto-generated/>

namespace Iskra.StdWeb;

#nullable enable

public sealed partial class SFrameCipherSuite
{
    private readonly string _value;

    private SFrameCipherSuite(string value)
    {
        _value = value;
    }

    public static readonly SFrameCipherSuite AES_128_CTR_HMAC_SHA256_80 = new("AES_128_CTR_HMAC_SHA256_80");
    public static readonly SFrameCipherSuite AES_128_CTR_HMAC_SHA256_64 = new("AES_128_CTR_HMAC_SHA256_64");
    public static readonly SFrameCipherSuite AES_128_CTR_HMAC_SHA256_32 = new("AES_128_CTR_HMAC_SHA256_32");
    public static readonly SFrameCipherSuite AES_128_GCM_SHA256_128 = new("AES_128_GCM_SHA256_128");
    public static readonly SFrameCipherSuite AES_256_GCM_SHA512_128 = new("AES_256_GCM_SHA512_128");

    public override string ToString() => _value;

    public static SFrameCipherSuite Create(string value) => value switch
    {
        "AES_128_CTR_HMAC_SHA256_80" => AES_128_CTR_HMAC_SHA256_80,
        "AES_128_CTR_HMAC_SHA256_64" => AES_128_CTR_HMAC_SHA256_64,
        "AES_128_CTR_HMAC_SHA256_32" => AES_128_CTR_HMAC_SHA256_32,
        "AES_128_GCM_SHA256_128" => AES_128_GCM_SHA256_128,
        "AES_256_GCM_SHA512_128" => AES_256_GCM_SHA512_128,
        _ => throw new ArgumentException($"Invalid value \"{value}\" for SFrameCipherSuite", nameof(value)),
    };
}

#nullable disable