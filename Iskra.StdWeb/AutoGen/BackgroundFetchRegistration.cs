// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.StdWeb;

#nullable enable

public partial class BackgroundFetchRegistration(JSObject obj): EventTarget(obj)
{
    public string Id
    {
        get
        {
            string __res_2981;
            string __res_2982 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "id");
            __res_2981 = __res_2982;
            return __res_2981;
        }
    }

    public ulong UploadTotal
    {
        get
        {
            ulong __res_2983;
            double __res_2984 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "uploadTotal");
            __res_2983 = Convert.ToUInt64(__res_2984);
            return __res_2983;
        }
    }

    public ulong Uploaded
    {
        get
        {
            ulong __res_2985;
            double __res_2986 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "uploaded");
            __res_2985 = Convert.ToUInt64(__res_2986);
            return __res_2985;
        }
    }

    public ulong DownloadTotal
    {
        get
        {
            ulong __res_2987;
            double __res_2988 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "downloadTotal");
            __res_2987 = Convert.ToUInt64(__res_2988);
            return __res_2987;
        }
    }

    public ulong Downloaded
    {
        get
        {
            ulong __res_2989;
            double __res_2990 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "downloaded");
            __res_2989 = Convert.ToUInt64(__res_2990);
            return __res_2989;
        }
    }

    public Iskra.StdWeb.BackgroundFetchResult Result
    {
        get
        {
            Iskra.StdWeb.BackgroundFetchResult __res_2991;
            JSObject __res_2992 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "result");
            throw new Exception("Marshaller from \"__res_2992\" to \"__res_2991\" not supported.");
            return __res_2991;
        }
    }

    public Iskra.StdWeb.BackgroundFetchFailureReason FailureReason
    {
        get
        {
            Iskra.StdWeb.BackgroundFetchFailureReason __res_2993;
            JSObject __res_2994 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "failureReason");
            throw new Exception("Marshaller from \"__res_2994\" to \"__res_2993\" not supported.");
            return __res_2993;
        }
    }

    public bool RecordsAvailable
    {
        get
        {
            bool __res_2995;
            bool __res_2996 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsBooleanV2(JSObject, "recordsAvailable");
            __res_2995 = __res_2996;
            return __res_2995;
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onprogress
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_2997;
            JSObject? __res_2998 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2AsNullable(JSObject, "onprogress");
            if (__res_2998 is null)
            {
                __res_2997 = null;
            }
            else
            {
                JSObject __notNullable_2999 = (JSObject)__res_2998;
                throw new Exception("Marshaller from \"__notNullable_2999\" to \"__res_2997\" not supported.");
            }
            return __res_2997;
        }
        set
        {
            throw new Exception();
        }
    }
}

#nullable disable