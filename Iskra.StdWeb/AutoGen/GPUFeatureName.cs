// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.StdWeb;

#nullable enable

public sealed partial class GPUFeatureName
{
    private readonly string _value;

    private GPUFeatureName(string value)
    {
        _value = value;
    }

    public static readonly GPUFeatureName Core_features_and_limits = new("core-features-and-limits");
    public static readonly GPUFeatureName Depth_clip_control = new("depth-clip-control");
    public static readonly GPUFeatureName Depth32float_stencil8 = new("depth32float-stencil8");
    public static readonly GPUFeatureName Texture_compression_bc = new("texture-compression-bc");
    public static readonly GPUFeatureName Texture_compression_bc_sliced_3d = new("texture-compression-bc-sliced-3d");
    public static readonly GPUFeatureName Texture_compression_etc2 = new("texture-compression-etc2");
    public static readonly GPUFeatureName Texture_compression_astc = new("texture-compression-astc");
    public static readonly GPUFeatureName Texture_compression_astc_sliced_3d = new("texture-compression-astc-sliced-3d");
    public static readonly GPUFeatureName Timestamp_query = new("timestamp-query");
    public static readonly GPUFeatureName Indirect_first_instance = new("indirect-first-instance");
    public static readonly GPUFeatureName Shader_f16 = new("shader-f16");
    public static readonly GPUFeatureName Rg11b10ufloat_renderable = new("rg11b10ufloat-renderable");
    public static readonly GPUFeatureName Bgra8unorm_storage = new("bgra8unorm-storage");
    public static readonly GPUFeatureName Float32_filterable = new("float32-filterable");
    public static readonly GPUFeatureName Float32_blendable = new("float32-blendable");
    public static readonly GPUFeatureName Clip_distances = new("clip-distances");
    public static readonly GPUFeatureName Dual_source_blending = new("dual-source-blending");
    public static readonly GPUFeatureName Subgroups = new("subgroups");
    public static readonly GPUFeatureName Texture_formats_tier1 = new("texture-formats-tier1");
    public static readonly GPUFeatureName Texture_formats_tier2 = new("texture-formats-tier2");
    public static readonly GPUFeatureName Primitive_index = new("primitive-index");

    public override string ToString() => _value;

    public static GPUFeatureName Create(string value) => value switch
    {
        "core-features-and-limits" => Core_features_and_limits,
        "depth-clip-control" => Depth_clip_control,
        "depth32float-stencil8" => Depth32float_stencil8,
        "texture-compression-bc" => Texture_compression_bc,
        "texture-compression-bc-sliced-3d" => Texture_compression_bc_sliced_3d,
        "texture-compression-etc2" => Texture_compression_etc2,
        "texture-compression-astc" => Texture_compression_astc,
        "texture-compression-astc-sliced-3d" => Texture_compression_astc_sliced_3d,
        "timestamp-query" => Timestamp_query,
        "indirect-first-instance" => Indirect_first_instance,
        "shader-f16" => Shader_f16,
        "rg11b10ufloat-renderable" => Rg11b10ufloat_renderable,
        "bgra8unorm-storage" => Bgra8unorm_storage,
        "float32-filterable" => Float32_filterable,
        "float32-blendable" => Float32_blendable,
        "clip-distances" => Clip_distances,
        "dual-source-blending" => Dual_source_blending,
        "subgroups" => Subgroups,
        "texture-formats-tier1" => Texture_formats_tier1,
        "texture-formats-tier2" => Texture_formats_tier2,
        "primitive-index" => Primitive_index,
        _ => throw new ArgumentException($"Invalid value \"{value}\" for GPUFeatureName", nameof(value)),
    };
}

#nullable disable