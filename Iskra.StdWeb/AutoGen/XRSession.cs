// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.StdWeb;

#nullable enable

public partial class XRSession(JSObject obj): EventTarget(obj)
{
    public XRVisibilityState VisibilityState
    {
        get
        {
            throw new Exception();
        }
    }

    public float? FrameRate
    {
        get
        {
            throw new Exception();
        }
    }

    public Float32Array? SupportedFrameRates
    {
        get
        {
            throw new Exception();
        }
    }

    public XRRenderState RenderState
    {
        get
        {
            throw new Exception();
        }
    }

    public XRInputSourceArray InputSources
    {
        get
        {
            throw new Exception();
        }
    }

    public XRInputSourceArray TrackedSources
    {
        get
        {
            throw new Exception();
        }
    }

    public object EnabledFeatures
    {
        get
        {
            throw new Exception();
        }
    }

    public bool IsSystemKeyboardSupported
    {
        get
        {
            throw new Exception();
        }
    }

    public EventHandler Onend
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Oninputsourceschange
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Onselect
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Onselectstart
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Onselectend
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Onsqueeze
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Onsqueezestart
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Onsqueezeend
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Onvisibilitychange
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public EventHandler Onframeratechange
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }
}

#nullable disable