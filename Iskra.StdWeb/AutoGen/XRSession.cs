// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.StdWeb;

#nullable enable

public partial class XRSession(JSObject obj): EventTarget(obj)
{
    public Iskra.StdWeb.XRVisibilityState VisibilityState
    {
        get
        {
            Iskra.StdWeb.XRVisibilityState __res_1689;
            throw new Exception();
            return __res_1689;
        }
    }

    public float? FrameRate
    {
        get
        {
            float? __res_1690;
            throw new Exception();
            return __res_1690;
        }
    }

    public Iskra.JSCore.Float32Array? SupportedFrameRates
    {
        get
        {
            Iskra.JSCore.Float32Array? __res_1691;
            throw new Exception();
            return __res_1691;
        }
    }

    public Iskra.StdWeb.XRRenderState RenderState
    {
        get
        {
            Iskra.StdWeb.XRRenderState __res_1692;
            throw new Exception();
            return __res_1692;
        }
    }

    public Iskra.StdWeb.XRInputSourceArray InputSources
    {
        get
        {
            Iskra.StdWeb.XRInputSourceArray __res_1693;
            throw new Exception();
            return __res_1693;
        }
    }

    public Iskra.StdWeb.XRInputSourceArray TrackedSources
    {
        get
        {
            Iskra.StdWeb.XRInputSourceArray __res_1694;
            throw new Exception();
            return __res_1694;
        }
    }

    public object EnabledFeatures
    {
        get
        {
            object __res_1695;
            throw new Exception();
            return __res_1695;
        }
    }

    public bool IsSystemKeyboardSupported
    {
        get
        {
            bool __res_1696;
            __res_1696 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsBooleanV2(JSObject, "isSystemKeyboardSupported");
            return __res_1696;
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onend
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1697;
            throw new Exception();
            return __res_1697;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Oninputsourceschange
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1698;
            throw new Exception();
            return __res_1698;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onselect
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1699;
            throw new Exception();
            return __res_1699;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onselectstart
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1700;
            throw new Exception();
            return __res_1700;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onselectend
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1701;
            throw new Exception();
            return __res_1701;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onsqueeze
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1702;
            throw new Exception();
            return __res_1702;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onsqueezestart
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1703;
            throw new Exception();
            return __res_1703;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onsqueezeend
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1704;
            throw new Exception();
            return __res_1704;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onvisibilitychange
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1705;
            throw new Exception();
            return __res_1705;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onframeratechange
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_1706;
            throw new Exception();
            return __res_1706;
        }
        set
        {
            throw new Exception();
        }
    }
}

#nullable disable