// <auto-generated/>

namespace Iskra.StdWeb;

#nullable enable

public partial class GPUSupportedLimits(global::System.Runtime.InteropServices.JavaScript.JSObject obj): global::Iskra.JSCore.JSObjectProxy(obj)
{
    public uint MaxTextureDimension1D
    {
        get
        {
            uint __res_695;
            double __res_696 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension1D");
            __res_695 = Convert.ToUInt32(__res_696);
            return __res_695;
        }
    }

    public uint MaxTextureDimension2D
    {
        get
        {
            uint __res_697;
            double __res_698 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension2D");
            __res_697 = Convert.ToUInt32(__res_698);
            return __res_697;
        }
    }

    public uint MaxTextureDimension3D
    {
        get
        {
            uint __res_699;
            double __res_700 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension3D");
            __res_699 = Convert.ToUInt32(__res_700);
            return __res_699;
        }
    }

    public uint MaxTextureArrayLayers
    {
        get
        {
            uint __res_701;
            double __res_702 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureArrayLayers");
            __res_701 = Convert.ToUInt32(__res_702);
            return __res_701;
        }
    }

    public uint MaxBindGroups
    {
        get
        {
            uint __res_703;
            double __res_704 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindGroups");
            __res_703 = Convert.ToUInt32(__res_704);
            return __res_703;
        }
    }

    public uint MaxBindGroupsPlusVertexBuffers
    {
        get
        {
            uint __res_705;
            double __res_706 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindGroupsPlusVertexBuffers");
            __res_705 = Convert.ToUInt32(__res_706);
            return __res_705;
        }
    }

    public uint MaxBindingsPerBindGroup
    {
        get
        {
            uint __res_707;
            double __res_708 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindingsPerBindGroup");
            __res_707 = Convert.ToUInt32(__res_708);
            return __res_707;
        }
    }

    public uint MaxDynamicUniformBuffersPerPipelineLayout
    {
        get
        {
            uint __res_709;
            double __res_710 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxDynamicUniformBuffersPerPipelineLayout");
            __res_709 = Convert.ToUInt32(__res_710);
            return __res_709;
        }
    }

    public uint MaxDynamicStorageBuffersPerPipelineLayout
    {
        get
        {
            uint __res_711;
            double __res_712 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxDynamicStorageBuffersPerPipelineLayout");
            __res_711 = Convert.ToUInt32(__res_712);
            return __res_711;
        }
    }

    public uint MaxSampledTexturesPerShaderStage
    {
        get
        {
            uint __res_713;
            double __res_714 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxSampledTexturesPerShaderStage");
            __res_713 = Convert.ToUInt32(__res_714);
            return __res_713;
        }
    }

    public uint MaxSamplersPerShaderStage
    {
        get
        {
            uint __res_715;
            double __res_716 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxSamplersPerShaderStage");
            __res_715 = Convert.ToUInt32(__res_716);
            return __res_715;
        }
    }

    public uint MaxStorageBuffersPerShaderStage
    {
        get
        {
            uint __res_717;
            double __res_718 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageBuffersPerShaderStage");
            __res_717 = Convert.ToUInt32(__res_718);
            return __res_717;
        }
    }

    public uint MaxStorageTexturesPerShaderStage
    {
        get
        {
            uint __res_719;
            double __res_720 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageTexturesPerShaderStage");
            __res_719 = Convert.ToUInt32(__res_720);
            return __res_719;
        }
    }

    public uint MaxUniformBuffersPerShaderStage
    {
        get
        {
            uint __res_721;
            double __res_722 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxUniformBuffersPerShaderStage");
            __res_721 = Convert.ToUInt32(__res_722);
            return __res_721;
        }
    }

    public ulong MaxUniformBufferBindingSize
    {
        get
        {
            ulong __res_723;
            double __res_724 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxUniformBufferBindingSize");
            __res_723 = Convert.ToUInt64(__res_724);
            return __res_723;
        }
    }

    public ulong MaxStorageBufferBindingSize
    {
        get
        {
            ulong __res_725;
            double __res_726 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageBufferBindingSize");
            __res_725 = Convert.ToUInt64(__res_726);
            return __res_725;
        }
    }

    public uint MinUniformBufferOffsetAlignment
    {
        get
        {
            uint __res_727;
            double __res_728 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "minUniformBufferOffsetAlignment");
            __res_727 = Convert.ToUInt32(__res_728);
            return __res_727;
        }
    }

    public uint MinStorageBufferOffsetAlignment
    {
        get
        {
            uint __res_729;
            double __res_730 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "minStorageBufferOffsetAlignment");
            __res_729 = Convert.ToUInt32(__res_730);
            return __res_729;
        }
    }

    public uint MaxVertexBuffers
    {
        get
        {
            uint __res_731;
            double __res_732 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexBuffers");
            __res_731 = Convert.ToUInt32(__res_732);
            return __res_731;
        }
    }

    public ulong MaxBufferSize
    {
        get
        {
            ulong __res_733;
            double __res_734 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBufferSize");
            __res_733 = Convert.ToUInt64(__res_734);
            return __res_733;
        }
    }

    public uint MaxVertexAttributes
    {
        get
        {
            uint __res_735;
            double __res_736 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexAttributes");
            __res_735 = Convert.ToUInt32(__res_736);
            return __res_735;
        }
    }

    public uint MaxVertexBufferArrayStride
    {
        get
        {
            uint __res_737;
            double __res_738 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexBufferArrayStride");
            __res_737 = Convert.ToUInt32(__res_738);
            return __res_737;
        }
    }

    public uint MaxInterStageShaderVariables
    {
        get
        {
            uint __res_739;
            double __res_740 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxInterStageShaderVariables");
            __res_739 = Convert.ToUInt32(__res_740);
            return __res_739;
        }
    }

    public uint MaxColorAttachments
    {
        get
        {
            uint __res_741;
            double __res_742 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxColorAttachments");
            __res_741 = Convert.ToUInt32(__res_742);
            return __res_741;
        }
    }

    public uint MaxColorAttachmentBytesPerSample
    {
        get
        {
            uint __res_743;
            double __res_744 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxColorAttachmentBytesPerSample");
            __res_743 = Convert.ToUInt32(__res_744);
            return __res_743;
        }
    }

    public uint MaxComputeWorkgroupStorageSize
    {
        get
        {
            uint __res_745;
            double __res_746 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupStorageSize");
            __res_745 = Convert.ToUInt32(__res_746);
            return __res_745;
        }
    }

    public uint MaxComputeInvocationsPerWorkgroup
    {
        get
        {
            uint __res_747;
            double __res_748 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeInvocationsPerWorkgroup");
            __res_747 = Convert.ToUInt32(__res_748);
            return __res_747;
        }
    }

    public uint MaxComputeWorkgroupSizeX
    {
        get
        {
            uint __res_749;
            double __res_750 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeX");
            __res_749 = Convert.ToUInt32(__res_750);
            return __res_749;
        }
    }

    public uint MaxComputeWorkgroupSizeY
    {
        get
        {
            uint __res_751;
            double __res_752 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeY");
            __res_751 = Convert.ToUInt32(__res_752);
            return __res_751;
        }
    }

    public uint MaxComputeWorkgroupSizeZ
    {
        get
        {
            uint __res_753;
            double __res_754 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeZ");
            __res_753 = Convert.ToUInt32(__res_754);
            return __res_753;
        }
    }

    public uint MaxComputeWorkgroupsPerDimension
    {
        get
        {
            uint __res_755;
            double __res_756 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupsPerDimension");
            __res_755 = Convert.ToUInt32(__res_756);
            return __res_755;
        }
    }
}

#nullable disable