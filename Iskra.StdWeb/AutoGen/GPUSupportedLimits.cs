// <auto-generated/>

namespace Iskra.StdWeb;

#nullable enable

public partial class GPUSupportedLimits(global::System.Runtime.InteropServices.JavaScript.JSObject obj): global::Iskra.JSCore.JSObjectProxy(obj)
{
    public uint MaxTextureDimension1D
    {
        get
        {
            uint __res_667;
            double __res_668 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension1D");
            __res_667 = Convert.ToUInt32(__res_668);
            return __res_667;
        }
    }

    public uint MaxTextureDimension2D
    {
        get
        {
            uint __res_669;
            double __res_670 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension2D");
            __res_669 = Convert.ToUInt32(__res_670);
            return __res_669;
        }
    }

    public uint MaxTextureDimension3D
    {
        get
        {
            uint __res_671;
            double __res_672 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension3D");
            __res_671 = Convert.ToUInt32(__res_672);
            return __res_671;
        }
    }

    public uint MaxTextureArrayLayers
    {
        get
        {
            uint __res_673;
            double __res_674 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureArrayLayers");
            __res_673 = Convert.ToUInt32(__res_674);
            return __res_673;
        }
    }

    public uint MaxBindGroups
    {
        get
        {
            uint __res_675;
            double __res_676 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindGroups");
            __res_675 = Convert.ToUInt32(__res_676);
            return __res_675;
        }
    }

    public uint MaxBindGroupsPlusVertexBuffers
    {
        get
        {
            uint __res_677;
            double __res_678 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindGroupsPlusVertexBuffers");
            __res_677 = Convert.ToUInt32(__res_678);
            return __res_677;
        }
    }

    public uint MaxBindingsPerBindGroup
    {
        get
        {
            uint __res_679;
            double __res_680 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindingsPerBindGroup");
            __res_679 = Convert.ToUInt32(__res_680);
            return __res_679;
        }
    }

    public uint MaxDynamicUniformBuffersPerPipelineLayout
    {
        get
        {
            uint __res_681;
            double __res_682 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxDynamicUniformBuffersPerPipelineLayout");
            __res_681 = Convert.ToUInt32(__res_682);
            return __res_681;
        }
    }

    public uint MaxDynamicStorageBuffersPerPipelineLayout
    {
        get
        {
            uint __res_683;
            double __res_684 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxDynamicStorageBuffersPerPipelineLayout");
            __res_683 = Convert.ToUInt32(__res_684);
            return __res_683;
        }
    }

    public uint MaxSampledTexturesPerShaderStage
    {
        get
        {
            uint __res_685;
            double __res_686 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxSampledTexturesPerShaderStage");
            __res_685 = Convert.ToUInt32(__res_686);
            return __res_685;
        }
    }

    public uint MaxSamplersPerShaderStage
    {
        get
        {
            uint __res_687;
            double __res_688 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxSamplersPerShaderStage");
            __res_687 = Convert.ToUInt32(__res_688);
            return __res_687;
        }
    }

    public uint MaxStorageBuffersPerShaderStage
    {
        get
        {
            uint __res_689;
            double __res_690 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageBuffersPerShaderStage");
            __res_689 = Convert.ToUInt32(__res_690);
            return __res_689;
        }
    }

    public uint MaxStorageTexturesPerShaderStage
    {
        get
        {
            uint __res_691;
            double __res_692 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageTexturesPerShaderStage");
            __res_691 = Convert.ToUInt32(__res_692);
            return __res_691;
        }
    }

    public uint MaxUniformBuffersPerShaderStage
    {
        get
        {
            uint __res_693;
            double __res_694 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxUniformBuffersPerShaderStage");
            __res_693 = Convert.ToUInt32(__res_694);
            return __res_693;
        }
    }

    public ulong MaxUniformBufferBindingSize
    {
        get
        {
            ulong __res_695;
            double __res_696 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxUniformBufferBindingSize");
            __res_695 = Convert.ToUInt64(__res_696);
            return __res_695;
        }
    }

    public ulong MaxStorageBufferBindingSize
    {
        get
        {
            ulong __res_697;
            double __res_698 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageBufferBindingSize");
            __res_697 = Convert.ToUInt64(__res_698);
            return __res_697;
        }
    }

    public uint MinUniformBufferOffsetAlignment
    {
        get
        {
            uint __res_699;
            double __res_700 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "minUniformBufferOffsetAlignment");
            __res_699 = Convert.ToUInt32(__res_700);
            return __res_699;
        }
    }

    public uint MinStorageBufferOffsetAlignment
    {
        get
        {
            uint __res_701;
            double __res_702 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "minStorageBufferOffsetAlignment");
            __res_701 = Convert.ToUInt32(__res_702);
            return __res_701;
        }
    }

    public uint MaxVertexBuffers
    {
        get
        {
            uint __res_703;
            double __res_704 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexBuffers");
            __res_703 = Convert.ToUInt32(__res_704);
            return __res_703;
        }
    }

    public ulong MaxBufferSize
    {
        get
        {
            ulong __res_705;
            double __res_706 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBufferSize");
            __res_705 = Convert.ToUInt64(__res_706);
            return __res_705;
        }
    }

    public uint MaxVertexAttributes
    {
        get
        {
            uint __res_707;
            double __res_708 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexAttributes");
            __res_707 = Convert.ToUInt32(__res_708);
            return __res_707;
        }
    }

    public uint MaxVertexBufferArrayStride
    {
        get
        {
            uint __res_709;
            double __res_710 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexBufferArrayStride");
            __res_709 = Convert.ToUInt32(__res_710);
            return __res_709;
        }
    }

    public uint MaxInterStageShaderVariables
    {
        get
        {
            uint __res_711;
            double __res_712 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxInterStageShaderVariables");
            __res_711 = Convert.ToUInt32(__res_712);
            return __res_711;
        }
    }

    public uint MaxColorAttachments
    {
        get
        {
            uint __res_713;
            double __res_714 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxColorAttachments");
            __res_713 = Convert.ToUInt32(__res_714);
            return __res_713;
        }
    }

    public uint MaxColorAttachmentBytesPerSample
    {
        get
        {
            uint __res_715;
            double __res_716 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxColorAttachmentBytesPerSample");
            __res_715 = Convert.ToUInt32(__res_716);
            return __res_715;
        }
    }

    public uint MaxComputeWorkgroupStorageSize
    {
        get
        {
            uint __res_717;
            double __res_718 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupStorageSize");
            __res_717 = Convert.ToUInt32(__res_718);
            return __res_717;
        }
    }

    public uint MaxComputeInvocationsPerWorkgroup
    {
        get
        {
            uint __res_719;
            double __res_720 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeInvocationsPerWorkgroup");
            __res_719 = Convert.ToUInt32(__res_720);
            return __res_719;
        }
    }

    public uint MaxComputeWorkgroupSizeX
    {
        get
        {
            uint __res_721;
            double __res_722 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeX");
            __res_721 = Convert.ToUInt32(__res_722);
            return __res_721;
        }
    }

    public uint MaxComputeWorkgroupSizeY
    {
        get
        {
            uint __res_723;
            double __res_724 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeY");
            __res_723 = Convert.ToUInt32(__res_724);
            return __res_723;
        }
    }

    public uint MaxComputeWorkgroupSizeZ
    {
        get
        {
            uint __res_725;
            double __res_726 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeZ");
            __res_725 = Convert.ToUInt32(__res_726);
            return __res_725;
        }
    }

    public uint MaxComputeWorkgroupsPerDimension
    {
        get
        {
            uint __res_727;
            double __res_728 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupsPerDimension");
            __res_727 = Convert.ToUInt32(__res_728);
            return __res_727;
        }
    }
}

#nullable disable