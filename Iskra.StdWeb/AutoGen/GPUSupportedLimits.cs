// <auto-generated/>

namespace Iskra.StdWeb;

#nullable enable

public partial class GPUSupportedLimits(global::System.Runtime.InteropServices.JavaScript.JSObject obj): global::Iskra.JSCore.JSObjectProxy(obj)
{
    public uint MaxTextureDimension1D
    {
        get
        {
            uint __res_666;
            double __res_667 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension1D");
            __res_666 = Convert.ToUInt32(__res_667);
            return __res_666;
        }
    }

    public uint MaxTextureDimension2D
    {
        get
        {
            uint __res_668;
            double __res_669 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension2D");
            __res_668 = Convert.ToUInt32(__res_669);
            return __res_668;
        }
    }

    public uint MaxTextureDimension3D
    {
        get
        {
            uint __res_670;
            double __res_671 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureDimension3D");
            __res_670 = Convert.ToUInt32(__res_671);
            return __res_670;
        }
    }

    public uint MaxTextureArrayLayers
    {
        get
        {
            uint __res_672;
            double __res_673 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxTextureArrayLayers");
            __res_672 = Convert.ToUInt32(__res_673);
            return __res_672;
        }
    }

    public uint MaxBindGroups
    {
        get
        {
            uint __res_674;
            double __res_675 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindGroups");
            __res_674 = Convert.ToUInt32(__res_675);
            return __res_674;
        }
    }

    public uint MaxBindGroupsPlusVertexBuffers
    {
        get
        {
            uint __res_676;
            double __res_677 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindGroupsPlusVertexBuffers");
            __res_676 = Convert.ToUInt32(__res_677);
            return __res_676;
        }
    }

    public uint MaxBindingsPerBindGroup
    {
        get
        {
            uint __res_678;
            double __res_679 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBindingsPerBindGroup");
            __res_678 = Convert.ToUInt32(__res_679);
            return __res_678;
        }
    }

    public uint MaxDynamicUniformBuffersPerPipelineLayout
    {
        get
        {
            uint __res_680;
            double __res_681 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxDynamicUniformBuffersPerPipelineLayout");
            __res_680 = Convert.ToUInt32(__res_681);
            return __res_680;
        }
    }

    public uint MaxDynamicStorageBuffersPerPipelineLayout
    {
        get
        {
            uint __res_682;
            double __res_683 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxDynamicStorageBuffersPerPipelineLayout");
            __res_682 = Convert.ToUInt32(__res_683);
            return __res_682;
        }
    }

    public uint MaxSampledTexturesPerShaderStage
    {
        get
        {
            uint __res_684;
            double __res_685 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxSampledTexturesPerShaderStage");
            __res_684 = Convert.ToUInt32(__res_685);
            return __res_684;
        }
    }

    public uint MaxSamplersPerShaderStage
    {
        get
        {
            uint __res_686;
            double __res_687 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxSamplersPerShaderStage");
            __res_686 = Convert.ToUInt32(__res_687);
            return __res_686;
        }
    }

    public uint MaxStorageBuffersPerShaderStage
    {
        get
        {
            uint __res_688;
            double __res_689 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageBuffersPerShaderStage");
            __res_688 = Convert.ToUInt32(__res_689);
            return __res_688;
        }
    }

    public uint MaxStorageTexturesPerShaderStage
    {
        get
        {
            uint __res_690;
            double __res_691 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageTexturesPerShaderStage");
            __res_690 = Convert.ToUInt32(__res_691);
            return __res_690;
        }
    }

    public uint MaxUniformBuffersPerShaderStage
    {
        get
        {
            uint __res_692;
            double __res_693 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxUniformBuffersPerShaderStage");
            __res_692 = Convert.ToUInt32(__res_693);
            return __res_692;
        }
    }

    public ulong MaxUniformBufferBindingSize
    {
        get
        {
            ulong __res_694;
            double __res_695 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxUniformBufferBindingSize");
            __res_694 = Convert.ToUInt64(__res_695);
            return __res_694;
        }
    }

    public ulong MaxStorageBufferBindingSize
    {
        get
        {
            ulong __res_696;
            double __res_697 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxStorageBufferBindingSize");
            __res_696 = Convert.ToUInt64(__res_697);
            return __res_696;
        }
    }

    public uint MinUniformBufferOffsetAlignment
    {
        get
        {
            uint __res_698;
            double __res_699 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "minUniformBufferOffsetAlignment");
            __res_698 = Convert.ToUInt32(__res_699);
            return __res_698;
        }
    }

    public uint MinStorageBufferOffsetAlignment
    {
        get
        {
            uint __res_700;
            double __res_701 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "minStorageBufferOffsetAlignment");
            __res_700 = Convert.ToUInt32(__res_701);
            return __res_700;
        }
    }

    public uint MaxVertexBuffers
    {
        get
        {
            uint __res_702;
            double __res_703 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexBuffers");
            __res_702 = Convert.ToUInt32(__res_703);
            return __res_702;
        }
    }

    public ulong MaxBufferSize
    {
        get
        {
            ulong __res_704;
            double __res_705 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxBufferSize");
            __res_704 = Convert.ToUInt64(__res_705);
            return __res_704;
        }
    }

    public uint MaxVertexAttributes
    {
        get
        {
            uint __res_706;
            double __res_707 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexAttributes");
            __res_706 = Convert.ToUInt32(__res_707);
            return __res_706;
        }
    }

    public uint MaxVertexBufferArrayStride
    {
        get
        {
            uint __res_708;
            double __res_709 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxVertexBufferArrayStride");
            __res_708 = Convert.ToUInt32(__res_709);
            return __res_708;
        }
    }

    public uint MaxInterStageShaderVariables
    {
        get
        {
            uint __res_710;
            double __res_711 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxInterStageShaderVariables");
            __res_710 = Convert.ToUInt32(__res_711);
            return __res_710;
        }
    }

    public uint MaxColorAttachments
    {
        get
        {
            uint __res_712;
            double __res_713 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxColorAttachments");
            __res_712 = Convert.ToUInt32(__res_713);
            return __res_712;
        }
    }

    public uint MaxColorAttachmentBytesPerSample
    {
        get
        {
            uint __res_714;
            double __res_715 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxColorAttachmentBytesPerSample");
            __res_714 = Convert.ToUInt32(__res_715);
            return __res_714;
        }
    }

    public uint MaxComputeWorkgroupStorageSize
    {
        get
        {
            uint __res_716;
            double __res_717 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupStorageSize");
            __res_716 = Convert.ToUInt32(__res_717);
            return __res_716;
        }
    }

    public uint MaxComputeInvocationsPerWorkgroup
    {
        get
        {
            uint __res_718;
            double __res_719 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeInvocationsPerWorkgroup");
            __res_718 = Convert.ToUInt32(__res_719);
            return __res_718;
        }
    }

    public uint MaxComputeWorkgroupSizeX
    {
        get
        {
            uint __res_720;
            double __res_721 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeX");
            __res_720 = Convert.ToUInt32(__res_721);
            return __res_720;
        }
    }

    public uint MaxComputeWorkgroupSizeY
    {
        get
        {
            uint __res_722;
            double __res_723 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeY");
            __res_722 = Convert.ToUInt32(__res_723);
            return __res_722;
        }
    }

    public uint MaxComputeWorkgroupSizeZ
    {
        get
        {
            uint __res_724;
            double __res_725 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupSizeZ");
            __res_724 = Convert.ToUInt32(__res_725);
            return __res_724;
        }
    }

    public uint MaxComputeWorkgroupsPerDimension
    {
        get
        {
            uint __res_726;
            double __res_727 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "maxComputeWorkgroupsPerDimension");
            __res_726 = Convert.ToUInt32(__res_727);
            return __res_726;
        }
    }
}

#nullable disable