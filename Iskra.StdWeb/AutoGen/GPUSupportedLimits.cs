// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.StdWeb;

#nullable enable

public partial class GPUSupportedLimits(JSObject obj): JSObjectProxy(obj)
{
    public uint MaxTextureDimension1D
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxTextureDimension2D
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxTextureDimension3D
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxTextureArrayLayers
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxBindGroups
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxBindGroupsPlusVertexBuffers
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxBindingsPerBindGroup
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxDynamicUniformBuffersPerPipelineLayout
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxDynamicStorageBuffersPerPipelineLayout
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxSampledTexturesPerShaderStage
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxSamplersPerShaderStage
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxStorageBuffersPerShaderStage
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxStorageTexturesPerShaderStage
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxUniformBuffersPerShaderStage
    {
        get
        {
            throw new Exception();
        }
    }

    public ulong MaxUniformBufferBindingSize
    {
        get
        {
            throw new Exception();
        }
    }

    public ulong MaxStorageBufferBindingSize
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MinUniformBufferOffsetAlignment
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MinStorageBufferOffsetAlignment
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxVertexBuffers
    {
        get
        {
            throw new Exception();
        }
    }

    public ulong MaxBufferSize
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxVertexAttributes
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxVertexBufferArrayStride
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxInterStageShaderVariables
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxColorAttachments
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxColorAttachmentBytesPerSample
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxComputeWorkgroupStorageSize
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxComputeInvocationsPerWorkgroup
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxComputeWorkgroupSizeX
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxComputeWorkgroupSizeY
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxComputeWorkgroupSizeZ
    {
        get
        {
            throw new Exception();
        }
    }

    public uint MaxComputeWorkgroupsPerDimension
    {
        get
        {
            throw new Exception();
        }
    }
}

#nullable disable