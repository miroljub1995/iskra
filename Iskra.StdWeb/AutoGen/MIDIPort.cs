// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.StdWeb;

#nullable enable

public partial class MIDIPort(JSObject obj): EventTarget(obj)
{
    public string Id
    {
        get
        {
            string __res_7403;
            string __res_7404 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "id");
            __res_7403 = __res_7404;
            return __res_7403;
        }
    }

    public string? Manufacturer
    {
        get
        {
            string? __res_7405;
            string? __res_7406 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2AsNullable(JSObject, "manufacturer");
            if (__res_7406 is null)
            {
                __res_7405 = null;
            }
            else
            {
                string __notNullable_7407 = (string)__res_7406;
                __res_7405 = __notNullable_7407;
            }
            return __res_7405;
        }
    }

    public string? Name
    {
        get
        {
            string? __res_7408;
            string? __res_7409 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2AsNullable(JSObject, "name");
            if (__res_7409 is null)
            {
                __res_7408 = null;
            }
            else
            {
                string __notNullable_7410 = (string)__res_7409;
                __res_7408 = __notNullable_7410;
            }
            return __res_7408;
        }
    }

    public Iskra.StdWeb.MIDIPortType Type
    {
        get
        {
            Iskra.StdWeb.MIDIPortType __res_7411;
            JSObject __res_7412 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "type");
            throw new Exception("Marshaller ToManaged from \"__res_7412\" to \"__res_7411\" not supported.");
            return __res_7411;
        }
    }

    public string? Version
    {
        get
        {
            string? __res_7413;
            string? __res_7414 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2AsNullable(JSObject, "version");
            if (__res_7414 is null)
            {
                __res_7413 = null;
            }
            else
            {
                string __notNullable_7415 = (string)__res_7414;
                __res_7413 = __notNullable_7415;
            }
            return __res_7413;
        }
    }

    public Iskra.StdWeb.MIDIPortDeviceState State
    {
        get
        {
            Iskra.StdWeb.MIDIPortDeviceState __res_7416;
            JSObject __res_7417 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "state");
            throw new Exception("Marshaller ToManaged from \"__res_7417\" to \"__res_7416\" not supported.");
            return __res_7416;
        }
    }

    public Iskra.StdWeb.MIDIPortConnectionState Connection
    {
        get
        {
            Iskra.StdWeb.MIDIPortConnectionState __res_7418;
            JSObject __res_7419 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "connection");
            throw new Exception("Marshaller ToManaged from \"__res_7419\" to \"__res_7418\" not supported.");
            return __res_7418;
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onstatechange
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_7420;
            JSObject? __res_7421 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2AsNullable(JSObject, "onstatechange");
            if (__res_7421 is null)
            {
                __res_7420 = null;
            }
            else
            {
                JSObject __notNullable_7422 = (JSObject)__res_7421;
                throw new Exception("Marshaller ToManaged from \"__notNullable_7422\" to \"__res_7420\" not supported.");
            }
            return __res_7420;
        }
        set
        {
            JSObject? __marshalledValue_7423;
            if (value is null)
            {
                __marshalledValue_7423 = null;
            }
            else
            {
                Iskra.StdWeb.EventHandlerNonNull __notNullable_7424 = (Iskra.StdWeb.EventHandlerNonNull)value;
                throw new Exception("Marshaller ToJS from \"__notNullable_7424\" to \"__marshalledValue_7423\" not supported.");
            }
            Iskra.JSCore.Extensions.JSObjectPropertyExtensions.SetPropertyAsJSObjectV2AsNullable(JSObject, "onstatechange", __marshalledValue_7423);
        }
    }
}

#nullable disable