// <auto-generated/>

namespace Iskra.StdWeb;

#nullable enable

public partial class MIDIPort(global::System.Runtime.InteropServices.JavaScript.JSObject obj): EventTarget(obj)
{
    public string Id
    {
        get
        {
            string __res_7560;
            string __res_7561 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "id");
            __res_7560 = __res_7561;
            return __res_7560;
        }
    }

    public string? Manufacturer
    {
        get
        {
            string? __res_7562;
            string? __res_7563 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2AsNullable(JSObject, "manufacturer");
            if (__res_7563 is null)
            {
                __res_7562 = null;
            }
            else
            {
                string __notNullable_7564 = (string)__res_7563;
                __res_7562 = __notNullable_7564;
            }
            return __res_7562;
        }
    }

    public string? Name
    {
        get
        {
            string? __res_7565;
            string? __res_7566 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2AsNullable(JSObject, "name");
            if (__res_7566 is null)
            {
                __res_7565 = null;
            }
            else
            {
                string __notNullable_7567 = (string)__res_7566;
                __res_7565 = __notNullable_7567;
            }
            return __res_7565;
        }
    }

    public global::Iskra.StdWeb.MIDIPortType Type
    {
        get
        {
            global::Iskra.StdWeb.MIDIPortType __res_7568;
            string __res_7569 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "type");
            __res_7568 = global::Iskra.StdWeb.MIDIPortType.Create(__res_7569);
            return __res_7568;
        }
    }

    public string? Version
    {
        get
        {
            string? __res_7570;
            string? __res_7571 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2AsNullable(JSObject, "version");
            if (__res_7571 is null)
            {
                __res_7570 = null;
            }
            else
            {
                string __notNullable_7572 = (string)__res_7571;
                __res_7570 = __notNullable_7572;
            }
            return __res_7570;
        }
    }

    public global::Iskra.StdWeb.MIDIPortDeviceState State
    {
        get
        {
            global::Iskra.StdWeb.MIDIPortDeviceState __res_7573;
            string __res_7574 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "state");
            __res_7573 = global::Iskra.StdWeb.MIDIPortDeviceState.Create(__res_7574);
            return __res_7573;
        }
    }

    public global::Iskra.StdWeb.MIDIPortConnectionState Connection
    {
        get
        {
            global::Iskra.StdWeb.MIDIPortConnectionState __res_7575;
            string __res_7576 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "connection");
            __res_7575 = global::Iskra.StdWeb.MIDIPortConnectionState.Create(__res_7576);
            return __res_7575;
        }
    }

    public global::Iskra.StdWeb.EventHandlerNonNull? Onstatechange
    {
        get
        {
            global::Iskra.StdWeb.EventHandlerNonNull? __res_7577;
            global::System.Runtime.InteropServices.JavaScript.JSObject? __res_7578 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2AsNullable(JSObject, "onstatechange");
            if (__res_7578 is null)
            {
                __res_7577 = null;
            }
            else
            {
                global::System.Runtime.InteropServices.JavaScript.JSObject __notNullable_7579 = (global::System.Runtime.InteropServices.JavaScript.JSObject)__res_7578;
                throw new global::System.Exception("Marshaller ToManaged from SingleTypeDescription { ExtAttrs = System.Collections.Generic.List`1[Iskra.WebIDLGenerator.Models.ExtendedAttribute], Nullable = False, IdlType = object } to SingleTypeDescription { ExtAttrs = System.Collections.Generic.List`1[Iskra.WebIDLGenerator.Models.ExtendedAttribute], Nullable = False, IdlType = EventHandlerNonNull } not supported.");
            }
            return __res_7577;
        }
        set
        {
            global::System.Runtime.InteropServices.JavaScript.JSObject? __marshalledValue_7580;
            if (value is null)
            {
                __marshalledValue_7580 = null;
            }
            else
            {
                global::Iskra.StdWeb.EventHandlerNonNull __notNullable_7581 = (global::Iskra.StdWeb.EventHandlerNonNull)value;
                throw new global::System.Exception("Marshaller ToJS from SingleTypeDescription { ExtAttrs = System.Collections.Generic.List`1[Iskra.WebIDLGenerator.Models.ExtendedAttribute], Nullable = False, IdlType = EventHandlerNonNull } to SingleTypeDescription { ExtAttrs = System.Collections.Generic.List`1[Iskra.WebIDLGenerator.Models.ExtendedAttribute], Nullable = False, IdlType = object } not supported.");
            }
            Iskra.JSCore.Extensions.JSObjectPropertyExtensions.SetPropertyAsJSObjectV2AsNullable(JSObject, "onstatechange", __marshalledValue_7580);
        }
    }
}

#nullable disable