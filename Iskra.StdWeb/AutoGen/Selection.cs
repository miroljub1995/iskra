// <auto-generated/>

namespace Iskra.StdWeb;

#nullable enable

public partial class Selection(global::System.Runtime.InteropServices.JavaScript.JSObject obj): global::Iskra.JSCore.JSObjectProxy(obj)
{
    public global::Iskra.StdWeb.Node? AnchorNode
    {
        get
        {
            global::Iskra.StdWeb.Node? __res_1158;
            global::System.Runtime.InteropServices.JavaScript.JSObject? __res_1159 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2AsNullable(JSObject, "anchorNode");
            if (__res_1159 is null)
            {
                __res_1158 = null;
            }
            else
            {
                global::System.Runtime.InteropServices.JavaScript.JSObject __notNullable_1160 = (global::System.Runtime.InteropServices.JavaScript.JSObject)__res_1159;
                __res_1158 = global::Iskra.JSCore.JSObjectProxyFactory.GetProxy<global::Iskra.StdWeb.Node>(__notNullable_1160);
            }
            return __res_1158;
        }
    }

    public uint AnchorOffset
    {
        get
        {
            uint __res_1161;
            double __res_1162 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "anchorOffset");
            __res_1161 = Convert.ToUInt32(__res_1162);
            return __res_1161;
        }
    }

    public global::Iskra.StdWeb.Node? FocusNode
    {
        get
        {
            global::Iskra.StdWeb.Node? __res_1163;
            global::System.Runtime.InteropServices.JavaScript.JSObject? __res_1164 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2AsNullable(JSObject, "focusNode");
            if (__res_1164 is null)
            {
                __res_1163 = null;
            }
            else
            {
                global::System.Runtime.InteropServices.JavaScript.JSObject __notNullable_1165 = (global::System.Runtime.InteropServices.JavaScript.JSObject)__res_1164;
                __res_1163 = global::Iskra.JSCore.JSObjectProxyFactory.GetProxy<global::Iskra.StdWeb.Node>(__notNullable_1165);
            }
            return __res_1163;
        }
    }

    public uint FocusOffset
    {
        get
        {
            uint __res_1166;
            double __res_1167 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "focusOffset");
            __res_1166 = Convert.ToUInt32(__res_1167);
            return __res_1166;
        }
    }

    public bool IsCollapsed
    {
        get
        {
            bool __res_1168;
            bool __res_1169 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsBooleanV2(JSObject, "isCollapsed");
            __res_1168 = __res_1169;
            return __res_1168;
        }
    }

    public uint RangeCount
    {
        get
        {
            uint __res_1170;
            double __res_1171 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(JSObject, "rangeCount");
            __res_1170 = Convert.ToUInt32(__res_1171);
            return __res_1170;
        }
    }

    public string Type
    {
        get
        {
            string __res_1172;
            string __res_1173 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "type");
            __res_1172 = __res_1173;
            return __res_1172;
        }
    }

    public string Direction
    {
        get
        {
            string __res_1174;
            string __res_1175 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "direction");
            __res_1174 = __res_1175;
            return __res_1174;
        }
    }
}

#nullable disable