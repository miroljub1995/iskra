// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.StdWeb;

#nullable enable

public partial class RTCPeerConnection(JSObject obj): EventTarget(obj)
{
    public Iskra.StdWeb.RTCSessionDescription? LocalDescription
    {
        get
        {
            Iskra.StdWeb.RTCSessionDescription? __res_761;
            throw new Exception();
            return __res_761;
        }
    }

    public Iskra.StdWeb.RTCSessionDescription? CurrentLocalDescription
    {
        get
        {
            Iskra.StdWeb.RTCSessionDescription? __res_762;
            throw new Exception();
            return __res_762;
        }
    }

    public Iskra.StdWeb.RTCSessionDescription? PendingLocalDescription
    {
        get
        {
            Iskra.StdWeb.RTCSessionDescription? __res_763;
            throw new Exception();
            return __res_763;
        }
    }

    public Iskra.StdWeb.RTCSessionDescription? RemoteDescription
    {
        get
        {
            Iskra.StdWeb.RTCSessionDescription? __res_764;
            throw new Exception();
            return __res_764;
        }
    }

    public Iskra.StdWeb.RTCSessionDescription? CurrentRemoteDescription
    {
        get
        {
            Iskra.StdWeb.RTCSessionDescription? __res_765;
            throw new Exception();
            return __res_765;
        }
    }

    public Iskra.StdWeb.RTCSessionDescription? PendingRemoteDescription
    {
        get
        {
            Iskra.StdWeb.RTCSessionDescription? __res_766;
            throw new Exception();
            return __res_766;
        }
    }

    public Iskra.StdWeb.RTCSignalingState SignalingState
    {
        get
        {
            Iskra.StdWeb.RTCSignalingState __res_767;
            throw new Exception();
            return __res_767;
        }
    }

    public Iskra.StdWeb.RTCIceGatheringState IceGatheringState
    {
        get
        {
            Iskra.StdWeb.RTCIceGatheringState __res_768;
            throw new Exception();
            return __res_768;
        }
    }

    public Iskra.StdWeb.RTCIceConnectionState IceConnectionState
    {
        get
        {
            Iskra.StdWeb.RTCIceConnectionState __res_769;
            throw new Exception();
            return __res_769;
        }
    }

    public Iskra.StdWeb.RTCPeerConnectionState ConnectionState
    {
        get
        {
            Iskra.StdWeb.RTCPeerConnectionState __res_770;
            throw new Exception();
            return __res_770;
        }
    }

    public bool? CanTrickleIceCandidates
    {
        get
        {
            bool? __res_771;
            __res_771 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsBooleanV2AsNullable(JSObject, "canTrickleIceCandidates");
            return __res_771;
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onnegotiationneeded
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_772;
            throw new Exception();
            return __res_772;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onicecandidate
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_773;
            throw new Exception();
            return __res_773;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onicecandidateerror
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_774;
            throw new Exception();
            return __res_774;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onsignalingstatechange
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_775;
            throw new Exception();
            return __res_775;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Oniceconnectionstatechange
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_776;
            throw new Exception();
            return __res_776;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onicegatheringstatechange
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_777;
            throw new Exception();
            return __res_777;
        }
        set
        {
            throw new Exception();
        }
    }

    public Iskra.StdWeb.EventHandlerNonNull? Onconnectionstatechange
    {
        get
        {
            Iskra.StdWeb.EventHandlerNonNull? __res_778;
            throw new Exception();
            return __res_778;
        }
        set
        {
            throw new Exception();
        }
    }
}

#nullable disable