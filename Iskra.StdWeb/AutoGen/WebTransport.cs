// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.StdWeb;

#nullable enable

public partial class WebTransport(JSObject obj): JSObjectProxy(obj)
{
    public object Ready
    {
        get
        {
            object __res_1916;
            throw new Exception();
            return __res_1916;
        }
    }

    public Iskra.StdWeb.WebTransportReliabilityMode Reliability
    {
        get
        {
            Iskra.StdWeb.WebTransportReliabilityMode __res_1917;
            JSObject __res_1918 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "reliability");
            throw new Exception("Marshaller from \"__res_1918\" to \"__res_1917\" not supported.");
            return __res_1917;
        }
    }

    public Iskra.StdWeb.WebTransportCongestionControl CongestionControl
    {
        get
        {
            Iskra.StdWeb.WebTransportCongestionControl __res_1919;
            JSObject __res_1920 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "congestionControl");
            throw new Exception("Marshaller from \"__res_1920\" to \"__res_1919\" not supported.");
            return __res_1919;
        }
    }

    public ushort? AnticipatedConcurrentIncomingUnidirectionalStreams
    {
        get
        {
            ushort? __res_1921;
            double? __res_1922 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2AsNullable(JSObject, "anticipatedConcurrentIncomingUnidirectionalStreams");
            if (__res_1922 is null)
            {
                __res_1921 = null;
            }
            else
            {
                double __notNullable_1923 = (double)__res_1922;
                throw new Exception("Marshaller from \"__notNullable_1923\" to \"__res_1921\" not supported.");
            }
            return __res_1921;
        }
        set
        {
            throw new Exception();
        }
    }

    public ushort? AnticipatedConcurrentIncomingBidirectionalStreams
    {
        get
        {
            ushort? __res_1924;
            double? __res_1925 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2AsNullable(JSObject, "anticipatedConcurrentIncomingBidirectionalStreams");
            if (__res_1925 is null)
            {
                __res_1924 = null;
            }
            else
            {
                double __notNullable_1926 = (double)__res_1925;
                throw new Exception("Marshaller from \"__notNullable_1926\" to \"__res_1924\" not supported.");
            }
            return __res_1924;
        }
        set
        {
            throw new Exception();
        }
    }

    public string Protocol
    {
        get
        {
            string __res_1927;
            string __res_1928 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsStringV2(JSObject, "protocol");
            __res_1927 = __res_1928;
            return __res_1927;
        }
    }

    public object Closed
    {
        get
        {
            object __res_1929;
            throw new Exception();
            return __res_1929;
        }
    }

    public object Draining
    {
        get
        {
            object __res_1930;
            throw new Exception();
            return __res_1930;
        }
    }

    public Iskra.StdWeb.WebTransportDatagramDuplexStream Datagrams
    {
        get
        {
            Iskra.StdWeb.WebTransportDatagramDuplexStream __res_1931;
            JSObject __res_1932 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "datagrams");
            throw new Exception("Marshaller from \"__res_1932\" to \"__res_1931\" not supported.");
            return __res_1931;
        }
    }

    public Iskra.StdWeb.ReadableStream IncomingBidirectionalStreams
    {
        get
        {
            Iskra.StdWeb.ReadableStream __res_1933;
            JSObject __res_1934 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "incomingBidirectionalStreams");
            throw new Exception("Marshaller from \"__res_1934\" to \"__res_1933\" not supported.");
            return __res_1933;
        }
    }

    public Iskra.StdWeb.ReadableStream IncomingUnidirectionalStreams
    {
        get
        {
            Iskra.StdWeb.ReadableStream __res_1935;
            JSObject __res_1936 = Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsJSObjectV2(JSObject, "incomingUnidirectionalStreams");
            throw new Exception("Marshaller from \"__res_1936\" to \"__res_1935\" not supported.");
            return __res_1935;
        }
    }

    public static bool SupportsReliableOnly
    {
        get
        {
            bool __res_1937;
            throw new Exception();
            return __res_1937;
        }
    }
}

#nullable disable