// <auto-generated/>

namespace Iskra.StdWeb;

#nullable enable

public sealed partial class KeyUsage
{
    private readonly string _value;

    private KeyUsage(string value)
    {
        _value = value;
    }

    public static readonly KeyUsage Encrypt = new("encrypt");
    public static readonly KeyUsage Decrypt = new("decrypt");
    public static readonly KeyUsage Sign = new("sign");
    public static readonly KeyUsage Verify = new("verify");
    public static readonly KeyUsage DeriveKey = new("deriveKey");
    public static readonly KeyUsage DeriveBits = new("deriveBits");
    public static readonly KeyUsage WrapKey = new("wrapKey");
    public static readonly KeyUsage UnwrapKey = new("unwrapKey");
    public static readonly KeyUsage EncapsulateKey = new("encapsulateKey");
    public static readonly KeyUsage EncapsulateBits = new("encapsulateBits");
    public static readonly KeyUsage DecapsulateKey = new("decapsulateKey");
    public static readonly KeyUsage DecapsulateBits = new("decapsulateBits");

    public override string ToString() => _value;

    public static KeyUsage Create(string value) => value switch
    {
        "encrypt" => Encrypt,
        "decrypt" => Decrypt,
        "sign" => Sign,
        "verify" => Verify,
        "deriveKey" => DeriveKey,
        "deriveBits" => DeriveBits,
        "wrapKey" => WrapKey,
        "unwrapKey" => UnwrapKey,
        "encapsulateKey" => EncapsulateKey,
        "encapsulateBits" => EncapsulateBits,
        "decapsulateKey" => DecapsulateKey,
        "decapsulateBits" => DecapsulateBits,
        _ => throw new ArgumentException($"Invalid value \"{value}\" for KeyUsage", nameof(value)),
    };
}

#nullable disable