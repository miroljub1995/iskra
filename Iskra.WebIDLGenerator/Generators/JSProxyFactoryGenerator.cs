using Iskra.WebIDLGenerator.Extensions;
using Iskra.WebIDLGenerator.Models;

namespace Iskra.WebIDLGenerator.Generators;

public class JSProxyFactoryGenerator(
    GenSettings genSettings,
    GenTypeDescriptors genTypeDescriptors
)
{
    public async Task GenerateAsync(CancellationToken cancellationToken = default)
    {
        if (genSettings.ProxyFactoryName is null)
        {
            return;
        }

        List<string> initStatements = [];

        foreach (var desc in genTypeDescriptors.Descriptors)
        {
            if (!desc.IsMain)
            {
                continue;
            }

            if (desc.RootType is not InterfaceType)
            {
                continue;
            }

            initStatements.Add($$"""
                                 Iskra.JSCore.JSObjectProxyFactory.AddConstructorFromProp(JSHost.GlobalThis, "{{desc.Name}}", obj => new {{desc.Name}}(obj) );
                                 """
            );
        }

        var initStatementsBody = string.Join("\n", initStatements);

        var content = $$"""
                        // <auto-generated/>

                        using System.Runtime.InteropServices.JavaScript;

                        namespace {{genSettings.Namespace}};

                        #nullable enable

                        public static class {{genSettings.ProxyFactoryName}}
                        {
                            private static int _isInitialized;

                            public static void Initialize()
                            {
                                if (Interlocked.CompareExchange(ref _isInitialized, 1, 0) != 0)
                                {
                                    return;
                                }

                        {{initStatementsBody.IndentLines(8)}}
                            }
                        }

                        #nullable disable
                        """;


        var outputFile = Path.GetFullPath(Path.Combine(genSettings.Output, genSettings.ProxyFactoryName + ".cs"));
        if (File.Exists(outputFile))
        {
            throw new Exception($"Output file {outputFile} already exists.");
        }

        await File.WriteAllTextAsync(outputFile, content, cancellationToken);
    }
}