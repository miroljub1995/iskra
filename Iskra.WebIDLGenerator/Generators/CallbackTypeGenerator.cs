using Iskra.StdWebGenerator.GeneratorContexts;
using Iskra.WebIDLGenerator.Extensions;
using Iskra.WebIDLGenerator.Models;
using Microsoft.Extensions.DependencyInjection;

namespace Iskra.WebIDLGenerator.Generators;

public class CallbackTypeGenerator(
    IServiceProvider provider,
    GeneratorContext generatorContext,
    GenSettings genSettings
)
{
    public string Generate(CallbackType input)
    {
        var descriptionToTypeDeclarationGenerator =
            provider.GetRequiredService<IDLTypeDescriptionToTypeDeclarationGenerator>();

        var argumentsToDeclarationGenerator =
            provider.GetRequiredService<ArgumentsToDeclarationGenerator>();

        var returnType = descriptionToTypeDeclarationGenerator.Generate(input.IdlType);
        var args = argumentsToDeclarationGenerator.Generate(input.Arguments);

        var content = $$"""
                        // <auto-generated/>

                        namespace {{genSettings.Namespace}};

                        #nullable enable

                        public delegate {{returnType}} {{input.Name}}Managed({{args}});

                        public partial class {{input.Name}}(global::System.Runtime.InteropServices.JavaScript.JSObject obj): global::Iskra.JSCore.JSObjectProxy(obj)
                        {
                            public static implicit operator {{input.Name}}({{input.Name}}Managed input)
                            {
                        {{GetConvertToJS(input).IndentLines(8)}}
                            }

                            public bool TryGetManaged([global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] out global::{{genSettings.Namespace}}.{{input.Name}}Managed? managed, bool allowConversion = false)
                            {
                        {{GetTryGetManaged(input).IndentLines(8)}}
                            }
                        }

                        #nullable disable
                        """;

        return content;
    }

    private string GetConvertToJS(CallbackType input)
    {
        var descriptionToTypeDeclarationGenerator =
            provider.GetRequiredService<IDLTypeDescriptionToTypeDeclarationGenerator>();
        var getPropertyValueGenerator = provider.GetRequiredService<GetPropertyValueGenerator>();
        var setPropertyValueGenerator = provider.GetRequiredService<SetPropertyValueGenerator>();

        var argsVar = generatorContext.GetNextVariableName("args");
        var lengthVar = generatorContext.GetNextVariableName("length");

        List<string> managedArgVars = [];
        List<string> argStatements = [];

        for (var i = 0; i < input.Arguments.Count; i++)
        {
            var arg = input.Arguments[i];

            var managedArgVar = generatorContext.GetNextVariableName("arg");
            managedArgVars.Add(managedArgVar);

            var argType = descriptionToTypeDeclarationGenerator.Generate(arg.IdlType);

            if (i != input.Arguments.Count - 1 || !arg.Variadic)
            {
                var getArgument = getPropertyValueGenerator.Generate(
                    inputVar: argsVar,
                    type: arg.IdlType,
                    propertyNameVar: $"{i}",
                    outputVar: managedArgVar
                );

                argStatements.Add(
                    $$"""
                      // Argument {{i + 1}}
                      {{argType}} {{managedArgVar}};
                      {{getArgument}}
                      """
                );
            }
            else
            {
                var paramsLengthVar = generatorContext.GetNextVariableName("paramsLength");
                var loopVar = generatorContext.GetNextVariableName("i");
                var paramsItem = generatorContext.GetNextVariableName("paramsItem");

                var getParamsItem = getPropertyValueGenerator.Generate(
                    inputVar: argsVar,
                    type: arg.IdlType,
                    propertyNameVar: $"{i} + {loopVar}",
                    outputVar: paramsItem
                );

                argStatements.Add(
                    $$"""
                      // Argument {{i + 1}}
                      int {{lengthVar}} = global::System.Convert.ToInt32(global::Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2({{argsVar}}, "length"));
                      int {{paramsLengthVar}} = {{lengthVar}} - {{i}};
                      {{argType}}[] {{managedArgVar}} = new {{argType}}[{{paramsLengthVar}}];
                      for (int {{loopVar}} = 0; {{loopVar}} < {{paramsLengthVar}}; {{loopVar}}++)
                      {
                          {{argType}} {{paramsItem}};

                      {{getParamsItem.IndentLines(4)}}

                          {{managedArgVar}}[{{loopVar}}] = {{paramsItem}};
                      }
                      """
                );
            }
        }

        var argStatementsStr = string.Join("\n\n", argStatements);
        var managedArgsList = string.Join(", ", managedArgVars);

        var funcObjVar = generatorContext.GetNextVariableName("funcObj");

        if (input.IdlType is SingleTypeDescription { IdlType: BuiltinTypes.Undefined })
        {
            return $$"""
                     Action<global::System.Runtime.InteropServices.JavaScript.JSObject> callback = ({{argsVar}}) =>
                     {
                         using ({{argsVar}})
                         {
                     {{argStatementsStr.IndentLines(8)}}

                             input({{managedArgsList}});
                         }
                     };

                     global::System.Runtime.InteropServices.JavaScript.JSObject {{funcObjVar}} = global::Iskra.JSCore.Extensions.JSFunctionExtensions.WrapAsVoidFunction(callback);
                     global::Iskra.JSCore.Extensions.JSFunctionExtensions.StoreManagedFunctionToProperty({{funcObjVar}}, input);

                     return new global::{{genSettings.Namespace}}.{{input.Name}}({{funcObjVar}});
                     """;
        }
        else
        {
            var resVar = generatorContext.GetNextVariableName("res");
            var managedResVar = generatorContext.GetNextVariableName("managedRes");
            var returnType = descriptionToTypeDeclarationGenerator.Generate(input.IdlType);

            var setResStatements = setPropertyValueGenerator.Generate(
                inputVar: resVar,
                valueVar: managedResVar,
                type: input.IdlType,
                propertyNameVar: "\"value\""
            );

            return $$"""
                     Action<global::System.Runtime.InteropServices.JavaScript.JSObject, global::System.Runtime.InteropServices.JavaScript.JSObject> callback = ({{argsVar}}, {{resVar}}) =>
                     {
                         using ({{argsVar}})
                         using ({{resVar}})
                         {
                     {{argStatementsStr.IndentLines(8)}}

                             {{returnType}} {{managedResVar}} = input({{managedArgsList}});

                     {{setResStatements.IndentLines(8)}}
                         }
                     };

                     global::System.Runtime.InteropServices.JavaScript.JSObject {{funcObjVar}} = global::Iskra.JSCore.Extensions.JSFunctionExtensions.WrapAsNonVoidFunction(callback);
                     global::Iskra.JSCore.Extensions.JSFunctionExtensions.StoreManagedFunctionToProperty({{funcObjVar}}, input); 

                     return new global::{{genSettings.Namespace}}.{{input.Name}}({{funcObjVar}});
                     """;
        }
    }

    private string GetTryGetManaged(CallbackType input)
    {
        var argsArrayGenerator = provider.GetRequiredService<ArgumentsToArgsArrayGenerator>();
        var toTypeDeclarationGenerator = provider.GetRequiredService<IDLTypeDescriptionToTypeDeclarationGenerator>();
        var getPropertyValueGenerator = provider.GetRequiredService<GetPropertyValueGenerator>();

        var argsArrayVar = generatorContext.GetNextVariableName("argsArray");
        var resOwnerVar = generatorContext.GetNextVariableName("resOwner");
        var resVar = generatorContext.GetNextVariableName("res");

        var isEmpty = input.Arguments.Count == 0;
        var isVoid = input.IdlType is SingleTypeDescription { IdlType: BuiltinTypes.Undefined };

        var argVars = input.Arguments
            .Select(x => x.ValidCSharpName)
            .ToList();

        List<string> managedStatements =
        [
            argsArrayGenerator.Generate(
                args: input.Arguments,
                argVars: argVars,
                argsArrayVar: argsArrayVar
            )
        ];

        if (!isVoid)
        {
            managedStatements.Add(
                $"using global::Iskra.JSCore.FunctionResPool.Owner {resOwnerVar} = global::Iskra.JSCore.FunctionResPool.Shared.Rent();");
        }

        if (isEmpty)
        {
            if (isVoid)
            {
                managedStatements.Add(
                    "global::Iskra.JSCore.Extensions.JSFunctionExtensions.CallEmptyVoidFunction(JSObject, null);");
            }
            else
            {
                managedStatements.Add(
                    $"global::Iskra.JSCore.Extensions.JSFunctionExtensions.CallEmptyNonVoidFunction(JSObject, null, {resOwnerVar}.JSObject);");
            }
        }
        else
        {
            if (isVoid)
            {
                managedStatements.Add(
                    $"global::Iskra.JSCore.Extensions.JSFunctionExtensions.CallNonEmptyVoidFunction(JSObject, null, {argsArrayVar}.JSObject);");
            }
            else
            {
                managedStatements.Add(
                    $"global::Iskra.JSCore.Extensions.JSFunctionExtensions.CallNonEmptyNonVoidFunction(JSObject, null, {argsArrayVar}.JSObject, {resOwnerVar}.JSObject);");
            }
        }

        if (!isVoid)
        {
            var returnType = toTypeDeclarationGenerator.Generate(input.IdlType);

            var getResValueStatements = getPropertyValueGenerator.Generate(
                inputVar: $"{resOwnerVar}.JSObject",
                type: input.IdlType,
                propertyNameVar: "\"value\"",
                outputVar: resVar
            );

            managedStatements.Add(
                $$"""
                  // Return Value
                  {{returnType}} {{resVar}};
                  {{getResValueStatements}}
                  return {{resVar}};
                  """
            );
        }

        return $$"""
                 managed = global::Iskra.JSCore.Extensions.JSFunctionExtensions.GetManagedFunctionFromProperty(JSObject) as global::{{genSettings.Namespace}}.{{input.Name}}Managed;
                 if (managed is not null)
                 {
                     return true;
                 }

                 if (!allowConversion)
                 {
                     return false;
                 }

                 managed = ({{string.Join(", ", argVars)}}) =>
                 {
                 {{string.Join("\n\n", managedStatements).IndentLines(4)}}
                 };
                 return true;
                 """;
    }
}