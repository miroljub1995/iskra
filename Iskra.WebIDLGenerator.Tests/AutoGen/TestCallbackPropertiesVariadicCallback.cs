// <auto-generated/>

namespace Iskra.WebIDLGenerator.Tests;

#nullable enable

public delegate void TestCallbackPropertiesVariadicCallbackManaged(long param1, params int[] values);

public partial class TestCallbackPropertiesVariadicCallback(global::System.Runtime.InteropServices.JavaScript.JSObject obj): global::Iskra.JSCore.JSObjectProxy(obj)
{
    public static implicit operator TestCallbackPropertiesVariadicCallback(TestCallbackPropertiesVariadicCallbackManaged input)
    {
        Action<global::System.Runtime.InteropServices.JavaScript.JSObject> callback = (__args_345) =>
        {
            using (__args_345)
            {
                // Argument 1
                long __arg_347;
                double __res_348 = global::Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(__args_345, 0);
                __arg_347 = Convert.ToInt64(__res_348);

                // Argument 2
                int __length_346 = global::System.Convert.ToInt32(global::Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(__args_345, "length"));
                int __paramsLength_350 = __length_346 - 1;
                int[] __arg_349 = new int[__paramsLength_350];
                for (int __i_351 = 0; __i_351 < __paramsLength_350; __i_351++)
                {
                    int __paramsItem_352;

                    double __res_353 = global::Iskra.JSCore.Extensions.JSObjectPropertyExtensions.GetPropertyAsDoubleV2(__args_345, 1 + __i_351);
                    __paramsItem_352 = Convert.ToInt32(__res_353);

                    __arg_349[__i_351] = __paramsItem_352;
                }

                input(__arg_347, __arg_349);
            }
        };

        return new global::Iskra.WebIDLGenerator.Tests.TestCallbackPropertiesVariadicCallback(global::Iskra.JSCore.Extensions.JSFunctionExtensions.WrapAsVoidFunction(callback));
    }
    
    public static implicit operator TestCallbackPropertiesVariadicCallbackManaged(TestCallbackPropertiesVariadicCallback input)
    {
        throw new NotImplementedException();
    }
}

#nullable disable