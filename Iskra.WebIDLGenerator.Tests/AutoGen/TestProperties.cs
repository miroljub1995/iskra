// <auto-generated/>

using System.Runtime.InteropServices.JavaScript;
using Iskra.JSCore;

namespace Iskra.WebIDLGenerator.Tests;

#nullable enable

public partial class TestProperties(JSObject obj): JSObjectProxy(obj)
{
    public int IntProperty
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public int IntPropertyReadOnly
    {
        get
        {
            throw new Exception();
        }
    }

    public int? IntPropertyNullable
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public int? IntPropertyReadOnlyNullableAsNull
    {
        get
        {
            throw new Exception();
        }
    }

    public int? IntPropertyReadOnlyNullableAsNotNull
    {
        get
        {
            throw new Exception();
        }
    }

    public double DoubleProperty
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public double DoublePropertyReadOnly
    {
        get
        {
            throw new Exception();
        }
    }

    public double? DoublePropertyNullable
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public double? DoublePropertyReadOnlyNullableAsNull
    {
        get
        {
            throw new Exception();
        }
    }

    public double? DoublePropertyReadOnlyNullableAsNotNull
    {
        get
        {
            throw new Exception();
        }
    }

    public bool BoolProperty
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public bool BoolPropertyReadOnly
    {
        get
        {
            throw new Exception();
        }
    }

    public bool? BoolPropertyNullable
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public bool? BoolPropertyReadOnlyNullableAsNull
    {
        get
        {
            throw new Exception();
        }
    }

    public bool? BoolPropertyReadOnlyNullableAsTrue
    {
        get
        {
            throw new Exception();
        }
    }

    public bool? BoolPropertyReadOnlyNullableAsFalse
    {
        get
        {
            throw new Exception();
        }
    }

    public string StringProperty
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public string StringPropertyReadOnly
    {
        get
        {
            throw new Exception();
        }
    }

    public string? StringPropertyNullable
    {
        get
        {
            throw new Exception();
        }
        set
        {
            throw new Exception();
        }
    }

    public string? StringPropertyReadOnlyNullableAsNull
    {
        get
        {
            throw new Exception();
        }
    }

    public string? StringPropertyReadOnlyNullableAsNotNull
    {
        get
        {
            throw new Exception();
        }
    }

    public string? StringPropertyReadOnlyNullableAsEmpty
    {
        get
        {
            throw new Exception();
        }
    }
}

#nullable disable